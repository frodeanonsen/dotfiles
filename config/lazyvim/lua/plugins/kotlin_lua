-- local nls = require("null-ls")
--
-- return {
--   {
--     "mfussenegger/nvim-lint",
--     dependencies = "williamboman/mason.nvim",
--
--     config = function()
--       local lint = require("lint")
--
--       lint.linters.gradledetekt = {
--         name = "gradledetekt",
--         cwd = vim.fn.getcwd(),
--         cmd = "./gradledetekt",
--         stdin = false,
--         stream = "both",
--         ignore_exitcode = true, -- Detekt might return non-zero codes even when successful
--
--         -- Custom parser for Detekt output
--         parser = function(output, bufnr)
--           local diagnostics = {}
--           for _, line in ipairs(vim.split(output, "\n")) do
--             -- Match the pattern for file, line number, column, and message
--             local filepath, lnum, col, message = line:match("([^:]+):(%d+):(%d+): (.+)")
--             if filepath and lnum and col and message then
--               -- Ensure the message format is correct and corresponds to a diagnostic
--               local diagnostic = {
--                 bufnr = bufnr,
--                 lnum = tonumber(lnum) - 1, -- Convert to 0-based index
--                 col = tonumber(col) - 1, -- Convert to 0-based index
--                 message = message,
--                 source = "detekt",
--                 severity = vim.diagnostic.severity.WARN, -- Adjust severity as needed
--               }
--
--               table.insert(diagnostics, diagnostic)
--             end
--           end
--           return diagnostics
--         end,
--       }
--
--       -- Add detekt to kotlin files
--       lint.linters_by_ft = {
--         kotlin = { "gradledetekt" },
--       }
--     end,
--   },
-- {
--   "stevearc/conform.nvim",
--   opts = {
--     formatters_by_ft = { kotlin = { "gradledetekt" } },
--   },
-- },
-- {
--   "nvimtools/none-ls.nvim",
--   config = function()
--     local nls = require("null-ls")
--     local helpers = require("null-ls.helpers")
--     vim.api.nvim_echo({ { "make gradledetekt", "Normal" } }, true, {})
--
--     local gradledetekt = helpers.make_builtin({
--       method = nls.methods.DIAGNOSTICS,
--       filetypes = { "kotlin" },
--       generator = helpers.generator_factory({
--         command = "./gradledetekt",
--         to_stdin = false,
--         to_stderr = false,
--         to_temp_file = false,
--         args = {},
--         format = "raw",
--         check_exit_code = function(code)
--           return code <= 1
--         end,
--         on_output = function(output, params)
--           vim.api.nvim_echo({ { "gradledetekt output", "Normal" } }, true, {})
--           local diagnostics = {}
--           for _, line in ipairs(vim.split(output, "\n")) do
--             local filepath, lnum, col, message = line:match("([^:]+):(%d+):(%d+): (.+)")
--             if filepath and lnum and col and message then
--               local diagnostic = {
--                 row = tonumber(lnum),
--                 col = tonumber(col),
--                 message = message,
--                 severity = 1,
--               }
--               table.insert(diagnostics, diagnostic)
--             end
--           end
--           return diagnostics
--         end,
--       }),
--     })
--     nls.register(gradledetekt)
--   end,
--
--   opts = function(_, opts)
--     vim.api.nvim_echo({ { "opts", "Normal" } }, true, {})
--     local nls = require("null-ls")
--     opts.sources = vim.list_extend(opts.sources or {}, {
--       -- nls.builtins.formatting.detekt,
--       nls.builtins.diagnostics.gradledetekt,
--     })
--   end,
-- },
-- }
