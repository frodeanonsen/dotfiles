#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

add_cron () {
  local frequency="*/15 * * * *"
  local command=$1
  local job="$frequency $command"
  cat <(fgrep -i -v "$command" <(crontab -l)) <(echo "$job") | crontab -
}

add_line () {
  local command=$1
  local job="$command"
  cat <(fgrep -i -v "$command" <(crontab -l)) <(echo "$job") | crontab -
}

setup_gitconfig
install_dotfiles

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if source bin/dot | while read -r data; do info "$data"; done
  then
    success "dependencies installed"
    echo ''
    echo "Now updating dependencies..."
    pip3 install --upgrade setuptools
  else
    fail "error installing dependencies"
  fi
fi

echo ''
info "starting jldeen mods"
#backup old bin, if exists
if [ -d $HOME/bin ]
then
    echo "current $HOME/bin folder found!!! Creating backup..."
    sudo mv $HOME/bin bin_old
    success "backup created"
else
    echo "No current $HOME/bin folder found. Proceeding to link bin folder for tumx scripts..."
fi

# symlink .dotfiles bin to ~
ln -s $HOME/.dotfiles/bin $HOME/bin && success "symlink for $HOME/bin folder created"

# symlink .dotfiles tmux to ~
ln -s $HOME/.dotfiles/tmux $HOME/.tmux && success "symlink for $HOME/.tmux folder created"

# symlink VSCode User Settings
if [ -d $HOME/Library/Application\ Support/Code/User ] ; then 
  ln -s $HOME/.dotfiles/code/settings.json $HOME/Library/Application\ Support/Code/User/settings.json
  success "symlink for vs code settings created"
else
  info "symlink for vs code settings not created"
  echo "VS Code does not appear to be installed or has not been launched yet. Cannot create symlink for VS Code User settings..."
fi

# install Source Code Pro nerd font
cp $HOME/.dotfiles/Source\ Code\ Pro\ Nerd\ Font\ Complete.ttf /Library/Fonts
success "Source Code Pro font copied successfully!"

# .config permissions fix
sudo chown $(whoami) $HOME/.config 
success '.config permissions fixed'

# airport symlink
if ! [ -f /usr/local/bin/airport ]
  then
    sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport
    success "symlink for airport created"
  else 
    info "symlink for airport already exists"
  fi

# crontab additions
add_line "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  if [[ $? -eq 0 ]]
  then
  success "$PATH added to crontab"
  else
  info "ERROR $PATH could not be added to crontab"
  fi

add_cron "speedtest-cli --simple > ~/bin/bandwidth.log"
  if [[ $? -eq 0 ]]
  then
  success "crontab created for speedtest cli --simple"
  else
  info "ERROR crontab could not be created for speedtest cli --simple"
  fi

add_cron "speedtest-cli --json > ~/bin/bandwidth.json"
  if [[ $? -eq 0 ]]
  then
  success "crontab created for speedtest cli --json"
  else
  info "ERROR crontab could not be created for speedtest cli --json"
  fi

# first run of speedtest-cli
echo "Running speedtest-cli for tmux status bar data now..."
speedtest-cli --simple > ~/bin/bandwidth.log
success "speedtest-cli bandwidth.log created"

speedtest-cli --json > ~/bin/bandwidth.json
success "speedtest-cli bandwidth.json created"

# iterm2 config
echo ''
read -p "Do you currently use iTerm2 and would you like to set jldeen's custom colors? y/n" -n 1 -r
echo ''
if [[ $REPLY =~ ^[Yy]$ ]]
then
	# Specify the preferences directory
  defaults write com.googlecode.iterm2 PrefsCustomFolder -string "$HOME/.itermcfg/"
  # Tell iTerm2 to use the custom preferences in the directory
  defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true
    if [[ $? -eq 0 ]]
    then
        success "successfully configured iTerm2 to use jldeen's custom colors..."
    else
        fail "failed to apply jldeen's custom colors..." >&2
fi
else 
    echo "You chose not to use iTerm2 or jldeen's custom colors."
fi

echo ''
echo '	Badass macOS terminal installed!'